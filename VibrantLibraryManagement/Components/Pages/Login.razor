@page "/login"
@using VibrantLibraryManagement.HelperServices
@rendermode InteractiveServer
@inject ILoginService LoginService;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationService AuthenticationService
@inject ILogger<Login> Logger
@inject IHttpContextAccessor HttpContextAccessor
@inject IServiceProvider _serviceProvider
@* @inject ISessionStorageService SessionStorage *@
@inject CustomAuthenticationStateProvider customAuthenticationStateProvider

<PageTitle>Login</PageTitle>

<div class="w-100">
    <div class="row p-0">
        <div class="col-12 col-md-4 left-column">
            <div class="container custom-container">
                <div class="col-12">
                    <img src="/images/vibrantlogobgremove.png" />
                </div>
                <div class="col-12">
                    <h4 style="margin:17px 0px 0px 0px; font-family: roboto;">Log in</h4>
                </div>
                @* <SfDataForm ID="LoginForm"
                Model="loginEntity" OnValidSubmit="Submit">
                <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
                </FormValidator>
                <FormItems>
                <FormItem Field="@nameof(loginEntity.Email)">
                <Template>
                <div class="email">
                <SfTextBox CssClass="email-field custom-textbox" @ref="TextBoxEmailObj" Type="InputType.Email" Placeholder="Email address" Created="@AddIcons"
                @oninput="OnEmailChanged"
                ></SfTextBox>
                </div>
                </Template>
                </FormItem>
                <FormItem Field="@nameof(loginEntity.Password)">
                <Template>
                <div class="password">
                <SfTextBox CssClass="custom-textbox PasswordIconClass" @ref="TextBoxPasswordObj" Type="InputType.Password" Placeholder="Password" Created="@AddIconsForPasswrd"
                @oninput="OnPasswordChanged"
                ></SfTextBox>
                <button @onclick="TogglePasswordVisibility" class="password-toggle-button">
                <SfIcon Name="IconName.Eye"></SfIcon>
                </button>
                </div>
                </Template>
                </FormItem>
                <FormButtons>
                <div style="display: flex; flex-direction: column; width: 100%; gap: 20px;">
                <div class="remember-me">
                <SfCheckBox Label="Remember me" @bind-Checked="isChecked"></SfCheckBox>
                </div>
                <SfButton CssClass="custom-button e-primary login-button"
                style="border-radius: 10px;
                margin-bottom: 10px; background: gray;"
                class="w-100"
                Disabled=@isButtonDisabled
                >Log in</SfButton>
                </div>
                </FormButtons>
                </FormItems>
                </SfDataForm> *@

                <SfDataForm ID="LoginForm" Model="loginEntity" OnValidSubmit="Submit">
                    <FormValidator>
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                    </FormValidator>
                    <FormItems>
                        <FormItem Field="@nameof(loginEntity.Email)">
                            <Template>
                                <div class="email">
                                    <SfTextBox CssClass="custom-textbox" @ref="@TextBoxEmailObj" @bind-Value="loginEntity.Email" Type="InputType.Email" Placeholder="Email address" Created="@AddIcons" @oninput="OnEmailChanged"></SfTextBox>
                                </div>
                            </Template>
                        </FormItem>
                        <FormItem Field="@nameof(loginEntity.Password)">
                            <Template>
                                <div class="password">
                                    <SfTextBox CssClass="custom-textbox" @ref="@TextBoxPasswordObj" @bind-Value="loginEntity.Password" Type="InputType.Password" Placeholder="Password" Created="@AddIconsForPasswrd" @oninput="OnPasswordChanged"></SfTextBox>
                                </div>
                            </Template>
                        </FormItem>
                        <FormButtons>
                            <div style="display: flex; flex-direction: column; width: 100%; gap: 20px;">
                                <div class="remember-me">
                                    <SfCheckBox Label="Remember me" @bind-Checked="isChecked"></SfCheckBox>
                                </div>
                                <SfButton CssClass="custom-button e-primary login-button"
                                          style="border-radius: 10px;
                margin-bottom: 10px; background: gray;"
                                          class="w-100"
                                          Disabled=@isButtonDisabled>Log in</SfButton>
                            </div>
                        </FormButtons>
                    </FormItems>
                </SfDataForm>



                <div class="col-12 mt-2">
                    <p class="custom-p" style="font-size: 13px;">Forget Password?</p>
                </div>
                <div class="col-12 mt-2">
                    <div class="d-flex g-3" style="font-size: 13px;"> <span class="text-muted">Don't have an account?</span> <p class="custom-p ms-1">Create account</p></div>
                </div>
                <div class="col-12 mt-2">
                    <Divider />
                </div>
                <div class="col-12 mt-2">
                    <SfButton CssClass="custom-google-button w-100" IsPrimary="true" IconCss="e-open-icon" IconPosition="@IconPosition.Left" @onclick="GoogleLogin">Continue with Google</SfButton>
                </div>
                @* <div class="col-12 mt-3">
                <SfButton CssClass="custom-google-button w-100" IsPrimary="true" IconCss="e-open-icon-apple" IconPosition="@IconPosition.Left">Continue with Apple ID</SfButton>
                </div> *@
                <div class="privacy-policy">
                    <p style="margin-bottom: 0px;"><span style="text-decoration: underline;">Privacy</span> and <span style="text-decoration: underline;">tearms of service</span></p>
                    <div style="width: 100px;">
                        <SfDropDownList TValue="string" TItem="Language" PopupHeight="350px" PopupWidth="350px" Placeholder="En-us" DataSource="@LocalData">
                            <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>

            </div>


        </div>
        <div class="col-0 col-md-8 m-0 p-0">
            <img src="/images/bookstreehq.jpg" class="tree-img" />
        </div>
    </div>

</div>

@code {
    SfTextBox TextBoxEmailObj;
    SfTextBox TextBoxPasswordObj;

    public string ResponseMessage { get; set; } = string.Empty;
    private LoginEntity loginEntity = new LoginEntity();

    private bool isChecked = false;
    public bool isButtonDisabled { get; set; } = true;

    private void OnEmailChanged()
    {
        string email = TextBoxEmailObj.Value;
        isButtonDisabled = false;
        StateHasChanged();
    }


    private void OnPasswordChanged()
    {
        isButtonDisabled = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        loginEntity = new LoginEntity();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //      await customAuthenticationStateProvider.InitializeAuthenticationStateAsync();
    //     // ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(authResponse.Token!);
    // }

    private async Task Submit()
    {
        try
        {
            var result = await LoginService.Login(loginEntity);

            if (result.Status == 200)
            {
                await StoreToken(result);
                Navigation.NavigateTo("/dashboard", true);
            }
            ResponseMessage = "result";
        }
        catch (Exception ex)
        {
            ResponseMessage = $"An error occurred: {ex.Message}";
        }
    }

    public async Task StoreToken(LoginResponse authResponse)
    {
        // await SessionStorage.SetItemAsync("vibrant-token", authResponse.AccessToken);
        await customAuthenticationStateProvider.SetAuthenticationStateAsync(authResponse.AccessToken);

    }

    public async Task AddIcons()
    {
        await this.TextBoxEmailObj.AddIconAsync("prepend", "e-icons");
    }

    public async Task AddIconsForPasswrd()
    {
        await this.TextBoxPasswordObj.AddIconAsync("prepend", "e-icons");
    }

    // Trigger Google Authentication
    private async Task GoogleLogin()
    {

        Navigation.NavigateTo("auth/login-google", forceLoad: true);
        // try
        // {
        //     // Challenge authentication before response is processed
        //     var authenticationProperties = new AuthenticationProperties { RedirectUri = "/" };
        //     // Use this method in the right time in the pipeline:
        //     await HttpContextAccessor.HttpContext.ChallengeAsync(GoogleDefaults.AuthenticationScheme, authenticationProperties);
        // }
        // catch (Exception ex)
        // {
        //     Logger.LogError("Error during Google login: {Message}", ex.Message);
        // }
    }

    // Language Dropdown
    public class Language
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    List<Language> LocalData = new List<Language> {
        new Language() { ID= "en", Text= "American English" },
        new Language() { ID= "bn", Text= "Bangali" }
    };

    // Adding Eye Icon
    private string PasswordIconClass { get; set; } = "e-icons e-password-show";

    private void TogglePasswordVisibility()
    {
        if (TextBoxPasswordObj.Type == InputType.Password)
        {
            TextBoxPasswordObj.Type = InputType.Text;
            PasswordIconClass = "e-icons e-password-hide";
        }
        else
        {
            TextBoxPasswordObj.Type = InputType.Password;
            PasswordIconClass = "e-icons e-password-show";
        }
    }

}

<style>
    .tree-img {
        height: 100vh;
        width: 100%;
        object-fit: cover;
    }

    .email .e-input-group.e-control-wrapper .e-input-group-icon {
        content: url('/images/mail.png') !important;
        background-size: contain !important;
        background-repeat: no-repeat !important;
        width: 16px !important;
        height: 16px !important;
        display: inline-block !important;
        margin-right: 15px;
    }

    .e-open-icon::after {
        content: url('/images/google.png') !important;
        background-size: contain !important;
        background-repeat: no-repeat !important;
        width: 16px !important;
        height: 16px !important;
        display: inline-block !important;
    }

    .e-open-icon-apple::after {
        content: url('/images/apple-logo.png') !important;
        background-size: contain !important;
        background-repeat: no-repeat !important;
        width: 16px !important;
        height: 16px !important;
        display: inline-block !important;
    }

    .password .e-input-group.e-control-wrapper .e-input-group-icon {
        content: url('/images/padlock.png') !important;
        background-size: contain !important;
        background-repeat: no-repeat !important;
        width: 16px !important;
        height: 16px !important;
        display: inline-block !important;
        margin-right: 15px;
    }

    .custom-container {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        height: 100%;
        padding: 20px 50px 0px 50px;
    }

    .left-column {
        box-shadow: 5px 0 15px -5px #adadad;
    }

    .custom-textbox {
        padding: 10px;
        border: 1px solid gray !important;
        border-radius: 10px !important;
    }

        .custom-textbox:focus {
            border-bottom: none !important; /* Remove underline */
        }

    .e-control:focus {
        border-color: #007bff; /* Change border color */
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Add box shadow */
    }

    .email .e-input-group.e-control-wrapper:not(.e-disabled) .e-input-group-icon:hover {
        color: transparent !important;
        background: none !important;
    }

    .password .e-input-group.e-control-wrapper:not(.e-disabled) .e-input-group-icon:hover {
        color: transparent !important;
        background: none !important;
    }

    .custom-button {
        background-color: @(isButtonDisabled ? "gray" : "#30cc7d") !important;
        color: black !important;
        padding: 10px;
        border-radius: 10px
    }

    .custom-p {
        text-decoration: underline;
        cursor: pointer;
        margin: 0px;
    }

    .custom-google-button {
        background-color: white !important;
        color: black !important;
        padding: 10px;
        border-radius: 10px
    }

    .remember-me {
        display: flex;
        align-items: center;
        gap: 15px;
    }

        .remember-me p {
            margin-bottom: 0px;
        }

    .login-button {
        width: 400px;
    }

    .privacy-policy {
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin: 20px 0px;
        font-size: 12px;
        align-items: center;
    }

    /* dropdown styles */
    .e-ddl.e-input-group input.e-input::placeholder {
        color: black;
    }

    /* Add eye icon to password field */
    .password {
        position: relative;
    }

    .password-toggle-button {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        cursor: pointer;
    }

        .password-toggle-button i {
            font-size: 20px;
        }

    .e-input-focus {
        border-bottom: none;
        color: red;
    }

    .e-input-group:not(.e-float-icon-left):not(.e-float-input)::before, .e-input-group:not(.e-float-icon-left):not(.e-float-input)::after, .e-input-group.e-float-icon-left:not(.e-float-input) .e-input-in-wrap::before, .e-input-group.e-float-icon-left:not(.e-float-input) .e-input-in-wrap::after, .e-input-group.e-control-wrapper:not(.e-float-icon-left):not(.e-float-input)::before, .e-input-group.e-control-wrapper:not(.e-float-icon-left):not(.e-float-input)::after, .e-input-group.e-control-wrapper.e-float-icon-left:not(.e-float-input) .e-input-in-wrap::before, .e-input-group.e-control-wrapper.e-float-icon-left:not(.e-float-input) .e-input-in-wrap::after, .e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line::before, .e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line::after, .e-float-input.e-input-group.e-float-icon-left .e-input-in-wrap .e-float-line::before, .e-float-input.e-input-group.e-float-icon-left .e-input-in-wrap .e-float-line::after, .e-float-input.e-control-wrapper.e-input-group:not(.e-float-icon-left) .e-float-line::before, .e-float-input.e-control-wrapper.e-input-group:not(.e-float-icon-left) .e-float-line::after, .e-float-input.e-control-wrapper.e-input-group.e-float-icon-left .e-input-in-wrap .e-float-line::before, .e-float-input.e-control-wrapper.e-input-group.e-float-icon-left .e-input-in-wrap .e-float-line::after, .e-filled.e-input-group.e-float-icon-left:not(.e-float-input)::before, .e-filled.e-input-group.e-float-icon-left:not(.e-float-input)::after, .e-filled.e-input-group.e-control-wrapper.e-float-icon-left:not(.e-float-input)::before, .e-filled.e-input-group.e-control-wrapper.e-float-icon-left:not(.e-float-input)::after, .e-filled.e-float-input.e-input-group.e-float-icon-left .e-float-line::before, .e-filled.e-float-input.e-input-group.e-float-icon-left .e-float-line::after, .e-filled.e-float-input.e-control-wrapper.e-input-group.e-float-icon-left .e-float-line::before, .e-filled.e-float-input.e-control-wrapper.e-input-group.e-float-icon-left .e-float-line::after {
        background: none !important;
    }

</style>